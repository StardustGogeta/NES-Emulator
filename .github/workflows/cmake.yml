name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
  # You can convert this to a matrix build if you need cross-platform coverage.
  # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  build-linux-gcc:
    runs-on: ubuntu-24.04

    name: "Linux - GCC / Make"

    steps:
    - uses: actions/checkout@v3

    - name: Download SDL2
      run: sudo apt-get install libsdl2-dev

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
      env:
        CC:   gcc-14
        CXX:  g++-14

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }}
      env:
        CC:   gcc-14
        CXX:  g++-14

    - name: Test
      working-directory: ${{ github.workspace }}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{ env.BUILD_TYPE }} --output-on-failure
      env:
        CC:   gcc-14
        CXX:  g++-14

  build-windows:
    runs-on: windows-latest

    name: Windows - ${{ matrix.make-program.name }}

    defaults:
      run:
        shell: msys2 {0}

    strategy:
      fail-fast: false
      matrix:
        make-program:
          - name: MinGW / Make
            package: mingw-w64-x86_64-make
            generator: MinGW Makefiles
            location: C:/msys64/mingw64/bin/mingw32-make.exe
            mingw: true
          - name: MinGW / Ninja
            package: mingw-w64-x86_64-ninja
            generator: Ninja
            location: C:/msys64/mingw64/bin/ninja.exe
            mingw: true
          - name: MSVC / MSBuild
            generator: Visual Studio 17 2022
            mingw: false

    steps:
    - uses: actions/checkout@v3
    - uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: mingw-w64-x86_64-gcc mingw-w64-x86_64-make mingw-w64-x86_64-ninja mingw-w64-x86_64-cmake

    - name: Configure CMake
      run: cmake
        -B ${{ github.workspace }}/build
        -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
        ${{ matrix.make-program.mingw && format('-G "{0}"', matrix.make-program.generator) || '' }}
        ${{ matrix.make-program.mingw && '-DCMAKE_CXX_COMPILER="C:/msys64/mingw64/bin/g++.exe"' || '' }}
        # ${{ matrix.make-program.mingw && format('-DCMAKE_MAKE_PROGRAM="{0}"', matrix.make-program.location) || '' }}

    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }}

    - name: Test
      working-directory: ${{ github.workspace }}/build
      run: ctest -C ${{ env.BUILD_TYPE }} --output-on-failure
